{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "383e98ad-223c-4335-887c-ebd7aadac224",
   "metadata": {},
   "outputs": [
    {
     "ename": "MissingSectionHeaderError",
     "evalue": "File contains no section headers.\nfile: 'config.ipynb', line: 1\n'{\\n'",
     "output_type": "error",
     "traceback": [
      "\u001b[31m---------------------------------------------------------------------------\u001b[39m",
      "\u001b[31mMissingSectionHeaderError\u001b[39m                 Traceback (most recent call last)",
      "\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[1]\u001b[39m\u001b[32m, line 17\u001b[39m\n\u001b[32m     14\u001b[39m     app_key = config[\u001b[33m'\u001b[39m\u001b[33mgmail\u001b[39m\u001b[33m'\u001b[39m][\u001b[33m\"\u001b[39m\u001b[33mpass_key\u001b[39m\u001b[33m\"\u001b[39m]\n\u001b[32m     15\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m access_key , secret_key , app_key\n\u001b[32m---> \u001b[39m\u001b[32m17\u001b[39m access_key, secret_key, app_key = \u001b[43mcredentials\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m     19\u001b[39m s3 = boto3.client(\n\u001b[32m     20\u001b[39m     \u001b[33m\"\u001b[39m\u001b[33ms3\u001b[39m\u001b[33m\"\u001b[39m,\n\u001b[32m     21\u001b[39m     aws_access_key_id=access_key,\n\u001b[32m     22\u001b[39m     aws_secret_access_key=secret_key\n\u001b[32m     23\u001b[39m )\n\u001b[32m     25\u001b[39m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34mload_product_master\u001b[39m(bucket_name, master_key):\n",
      "\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[1]\u001b[39m\u001b[32m, line 11\u001b[39m, in \u001b[36mcredentials\u001b[39m\u001b[34m()\u001b[39m\n\u001b[32m      8\u001b[39m config = configparser.ConfigParser()\n\u001b[32m     10\u001b[39m \u001b[38;5;66;03m# Step 2: Read the config file\u001b[39;00m\n\u001b[32m---> \u001b[39m\u001b[32m11\u001b[39m \u001b[43mconfig\u001b[49m\u001b[43m.\u001b[49m\u001b[43mread\u001b[49m\u001b[43m(\u001b[49m\u001b[33;43m'\u001b[39;49m\u001b[33;43mconfig.ipynb\u001b[39;49m\u001b[33;43m'\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[32m     12\u001b[39m access_key = config[\u001b[33m'\u001b[39m\u001b[33maws\u001b[39m\u001b[33m'\u001b[39m][\u001b[33m\"\u001b[39m\u001b[33maccess_key\u001b[39m\u001b[33m\"\u001b[39m]\n\u001b[32m     13\u001b[39m secret_key = config[\u001b[33m\"\u001b[39m\u001b[33maws\u001b[39m\u001b[33m\"\u001b[39m][\u001b[33m\"\u001b[39m\u001b[33msecret_key\u001b[39m\u001b[33m\"\u001b[39m]\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\configparser.py:737\u001b[39m, in \u001b[36mRawConfigParser.read\u001b[39m\u001b[34m(self, filenames, encoding)\u001b[39m\n\u001b[32m    735\u001b[39m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[32m    736\u001b[39m     \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mopen\u001b[39m(filename, encoding=encoding) \u001b[38;5;28;01mas\u001b[39;00m fp:\n\u001b[32m--> \u001b[39m\u001b[32m737\u001b[39m         \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_read\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfp\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfilename\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    738\u001b[39m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mOSError\u001b[39;00m:\n\u001b[32m    739\u001b[39m     \u001b[38;5;28;01mcontinue\u001b[39;00m\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\configparser.py:1052\u001b[39m, in \u001b[36mRawConfigParser._read\u001b[39m\u001b[34m(self, fp, fpname)\u001b[39m\n\u001b[32m   1034\u001b[39m \u001b[38;5;250m\u001b[39m\u001b[33;03m\"\"\"Parse a sectioned configuration file.\u001b[39;00m\n\u001b[32m   1035\u001b[39m \n\u001b[32m   1036\u001b[39m \u001b[33;03mEach section in a configuration file contains a header, indicated by\u001b[39;00m\n\u001b[32m   (...)\u001b[39m\u001b[32m   1048\u001b[39m \u001b[33;03msection names. Please note that comments get stripped off when reading configuration files.\u001b[39;00m\n\u001b[32m   1049\u001b[39m \u001b[33;03m\"\"\"\u001b[39;00m\n\u001b[32m   1051\u001b[39m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[32m-> \u001b[39m\u001b[32m1052\u001b[39m     ParsingError._raise_all(\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_read_inner\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfp\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfpname\u001b[49m\u001b[43m)\u001b[49m)\n\u001b[32m   1053\u001b[39m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[32m   1054\u001b[39m     \u001b[38;5;28mself\u001b[39m._join_multiline_values()\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\configparser.py:1081\u001b[39m, in \u001b[36mRawConfigParser._read_inner\u001b[39m\u001b[34m(self, fp, fpname)\u001b[39m\n\u001b[32m   1078\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m._handle_continuation_line(st, line, fpname):\n\u001b[32m   1079\u001b[39m         \u001b[38;5;28;01mcontinue\u001b[39;00m\n\u001b[32m-> \u001b[39m\u001b[32m1081\u001b[39m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_handle_rest\u001b[49m\u001b[43m(\u001b[49m\u001b[43mst\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mline\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfpname\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   1083\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m st.errors\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\configparser.py:1105\u001b[39m, in \u001b[36mRawConfigParser._handle_rest\u001b[39m\u001b[34m(self, st, line, fpname)\u001b[39m\n\u001b[32m   1102\u001b[39m mo = \u001b[38;5;28mself\u001b[39m.SECTCRE.match(line.clean)\n\u001b[32m   1104\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m mo \u001b[38;5;129;01mand\u001b[39;00m st.cursect \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[32m-> \u001b[39m\u001b[32m1105\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m MissingSectionHeaderError(fpname, st.lineno, line)\n\u001b[32m   1107\u001b[39m \u001b[38;5;28mself\u001b[39m._handle_header(st, mo.group(\u001b[33m'\u001b[39m\u001b[33mheader\u001b[39m\u001b[33m'\u001b[39m), fpname) \u001b[38;5;28;01mif\u001b[39;00m mo \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;28mself\u001b[39m._handle_option(st, line, fpname)\n",
      "\u001b[31mMissingSectionHeaderError\u001b[39m: File contains no section headers.\nfile: 'config.ipynb', line: 1\n'{\\n'"
     ]
    }
   ],
   "source": [
    "import boto3\n",
    "from datetime import datetime\n",
    "import configparser\n",
    "\n",
    "#Getting the credentials for AWS and Gmail\n",
    "def credentials():\n",
    "    \n",
    "    #Create a ConfigParser object\n",
    "    config = configparser.ConfigParser()\n",
    "\n",
    "    #Read the config file\n",
    "    config.read('config.ini')\n",
    "    access_key = config['aws'][\"access_key\"]\n",
    "    secret_key = config[\"aws\"][\"secret_key\"]\n",
    "    app_key = config['gmail'][\"pass_key\"]\n",
    "    return access_key , secret_key , app_key\n",
    "\n",
    "access_key, secret_key, app_key = credentials()\n",
    "\n",
    "s3 = boto3.client(\n",
    "    \"s3\",\n",
    "    aws_access_key_id=access_key,\n",
    "    aws_secret_access_key=secret_key,\n",
    "    verify=False\n",
    ")\n",
    "\n",
    "#Reading product master table and assigning it to a dictionary\n",
    "def load_product_master(bucket_name, master_key):\n",
    "    products = {}\n",
    "    response = s3.get_object(Bucket=bucket_name, Key=master_key)\n",
    "    lines = response['Body'].read().decode('utf-8').splitlines()\n",
    "\n",
    "    for line in lines[1:]:\n",
    "        parts = line.strip().split(\",\")\n",
    "        if len(parts) == 4:\n",
    "            product_id, product_name, price, category = parts\n",
    "            products[product_id] = float(price)\n",
    "    return products\n",
    "\n",
    "#Carrying out validation checks\n",
    "def validate_line(fields, products, current_date):\n",
    "    reasons = []\n",
    "    if len(fields) != 6:\n",
    "        reasons.append(\"Incorrect number of fields\")\n",
    "        return reasons\n",
    "\n",
    "    order_id, order_date, product_id, quantity, total_sales_amount, city = [f.strip() for f in fields]\n",
    "\n",
    "    for field in fields:\n",
    "        if field == \"\":\n",
    "            reasons.append(\"Empty fields present\")\n",
    "\n",
    "    if product_id not in products:\n",
    "        reasons.append(\"Invalid product ID\")\n",
    "\n",
    "    try:\n",
    "        quantity_val = int(quantity)\n",
    "        amount_val = float(total_sales_amount)\n",
    "        if product_id in products:\n",
    "            expected_amount = products[product_id] * quantity_val\n",
    "            if round(expected_amount, 2) != round(amount_val, 2):\n",
    "                reasons.append(\"Incorrect total_sales_amount\")\n",
    "    except ValueError:\n",
    "        reasons.append(\"Invalid quantity or total_sales_amount format\")\n",
    "\n",
    "    try:\n",
    "        order_date_val = datetime.strptime(order_date, \"%d-%m-%Y\")\n",
    "        if order_date_val > current_date:\n",
    "            reasons.append(\"Order date is in the future\")\n",
    "    except:\n",
    "        reasons.append(\"Invalid order_date format\")\n",
    "\n",
    "    if city not in [\"Mumbai\", \"Bangalore\"]:\n",
    "        reasons.append(\"Invalid city\")\n",
    "\n",
    "    return reasons\n",
    "\n",
    "#Reading a file from S3\n",
    "def read_s3_file(bucket_name, key):\n",
    "    response = s3.get_object(Bucket=bucket_name, Key=key)\n",
    "    content = response['Body'].read().decode('utf-8')\n",
    "    return content.splitlines()\n",
    "\n",
    "#Writing a file to S3\n",
    "def write_s3_file(bucket_name, key, lines):\n",
    "    s3.put_object(Bucket=bucket_name, Key=key, Body=\"\\n\".join(lines).encode('utf-8'))\n",
    "\n",
    "#Copying file from source to destination in S3\n",
    "def copy_s3_file(bucket_name, src_key, dest_key):\n",
    "    s3.copy_object(Bucket=bucket_name, CopySource={'Bucket': bucket_name, 'Key': src_key}, Key=dest_key)\n",
    "\n",
    "#Deleting a file from a bucket in S3\n",
    "def delete_s3_file(bucket_name, key):\n",
    "    s3.delete_object(Bucket=bucket_name, Key=key)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0e06b10d-6332-4cda-b054-b0c5f644aecd",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
